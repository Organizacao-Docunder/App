networks:
  db-network:
    driver: bridge
  docunder-network:
    driver: bridge

volumes:
  users-postgres:

services:
  postgres:
    image: postgres:16.2-alpine3.19
    container_name: docunder-db
    restart: always
    shm_size: 128mb
    volumes:
      - "users-postgres:/var/lib/postgresql/data"
    networks:
      - db-network
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s  
    ports:
      - ${DB_PORT}:5432
            
  backend:
    build:
        context: "./"
    container_name: docunder-backend
    restart: always
    command: ./docker-entrypoint.sh
    networks:
      - docunder-network
      - db-network
    environment:
      - DATABASE_URL
      - JWT_SECRET
      - NODE_ENV
    ports:
      - 3000:3000
      - 5555:5555
    develop:
      # watch:
      #   - action: sync+restart
      #     path: ./src
      #     target: /app/src
    depends_on:
      - postgres

  frontend:
    build:
        context: "../frontend-app/"
    container_name: docunder-frontend
    # command: npm run start
    restart: always
    networks:
      - docunder-network
    environment:
      - BACKEND_HOST=backend
      - PORT=3001
      - WATCHPACK_POLLING=true
    ports:
      - 3001:3001
    # volumes:
    #   - /nextjs-app/:/app
    #   - /app/node_modules
    #   - /app/.next
    depends_on:
      - backend
                    

                          
                    
